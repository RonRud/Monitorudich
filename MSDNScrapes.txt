AcquireSRWLockExclusive-void AcquireSRWLockExclusive( PSRWLOCK SRWLock );
ReleaseSRWLockExclusive-void ReleaseSRWLockExclusive( PSRWLOCK SRWLock );
GetCurrentProcess-HANDLE GetCurrentProcess( );
RtlCaptureContext-NTSYSAPI VOID RtlCaptureContext( PCONTEXT ContextRecord );
GetProcAddress-FARPROC GetProcAddress( HMODULE hModule, LPCSTR lpProcName );
ReleaseMutex-BOOL ReleaseMutex( HANDLE hMutex );
GetCurrentDirectoryW-DWORD GetCurrentDirectory( DWORD nBufferLength, LPTSTR lpBuffer );
GetEnvironmentVariableW-DWORD GetEnvironmentVariableW( LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize );
EnterCriticalSection-void EnterCriticalSection( LPCRITICAL_SECTION lpCriticalSection );
LeaveCriticalSection-void LeaveCriticalSection( LPCRITICAL_SECTION lpCriticalSection );
GetStdHandle-HANDLE WINAPI GetStdHandle( DWORD nStdHandle );
TerminateProcess-BOOL TerminateProcess( HANDLE hProcess, UINT uExitCode );
GetCurrentProcessId-DWORD GetCurrentProcessId( );
TryEnterCriticalSection-BOOL TryEnterCriticalSection( LPCRITICAL_SECTION lpCriticalSection );
QueryPerformanceCounter-BOOL QueryPerformanceCounter( LARGE_INTEGER* lpPerformanceCount );
GetSystemTimeAsFileTime-void GetSystemTimeAsFileTime( LPFILETIME lpSystemTimeAsFileTime );
AddVectoredExceptionHandler-PVOID AddVectoredExceptionHandler( ULONG First, PVECTORED_EXCEPTION_HANDLER Handler );
SetThreadStackGuarantee-BOOL SetThreadStackGuarantee( PULONG StackSizeInBytes );
GetProcessHeap-HANDLE GetProcessHeap( );
HeapAlloc-DECLSPEC_ALLOCATOR LPVOID HeapAlloc( HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes );
HeapFree-BOOL HeapFree( HANDLE hHeap, DWORD dwFlags, LPVOID lpMem );
InitializeCriticalSection-void InitializeCriticalSection( LPCRITICAL_SECTION lpCriticalSection );
AcquireSRWLockShared-void AcquireSRWLockShared( PSRWLOCK SRWLock );
ReleaseSRWLockShared-void AcquireSRWLockShared( PSRWLOCK SRWLock );
WaitForSingleObjectEx-DWORD WaitForSingleObjectEx( HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable );
LoadLibraryA-HMODULE LoadLibraryA( LPCSTR lpLibFileName );
CreateMutexA-HANDLE CreateMutexA( LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName );
GetFileInformationByHandle-BOOL GetFileInformationByHandle( HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation );
DeviceIoControl-BOOL DeviceIoControl( HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped );
GetModuleHandleW-HMODULE GetModuleHandleW( LPCWSTR lpModuleName );
FormatMessageW-DWORD FormatMessageW( DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list* Arguments );
GetFullPathNameW-DWORD GetFullPathNameW( LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR* lpFilePart );
TlsGetValue-LPVOID TlsGetValue( DWORD dwTlsIndex );
TlsSetValue-BOOL TlsSetValue( DWORD dwTlsIndex, LPVOID lpTlsValue );
GetModuleHandleA-HMODULE GetModuleHandleA( LPCSTR lpModuleName );
GetConsoleMode-BOOL WINAPI GetConsoleMode( HANDLE hConsoleHandle, LPDWORD lpMode );
WriteConsoleW-BOOL WINAPI WriteConsole( HANDLE hConsoleOutput, VOID* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved );
ReadConsoleW-BOOL WINAPI ReadConsole( HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, LPVOID pInputControl );
SetUnhandledExceptionFilter-LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter( LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter );
UnhandledExceptionFilter-LONG UnhandledExceptionFilter( _EXCEPTION_POINTERS* ExceptionInfo );
IsDebuggerPresent-BOOL IsDebuggerPresent( );
InitializeSListHead-void InitializeSListHead( PSLIST_HEADER ListHead );
HeapReAlloc-DECLSPEC_ALLOCATOR LPVOID HeapReAlloc( HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes );
IsProcessorFeaturePresent-BOOL IsProcessorFeaturePresent( DWORD ProcessorFeature );
_register_thread_local_exe_atexit_callback-int atexit( void (__cdecl* func  );
_initterm_e-void __cdecl _initterm( PVFV* , PVFV*  );
_initterm-void __cdecl _initterm( PVFV* , PVFV*  );
_seh_filter_exe-int __cdecl _seh_filter_dll( unsigned long _ExceptionNum, struct _EXCEPTION_POINTERS* _ExceptionPtr );
_crt_atexit-int atexit( void (__cdecl* func  );
_controlfp_s-errno_t _controlfp_s( unsigned int* currentControl, unsigned int newControl, unsigned int mask );
_set_app_type-typedef enum _crt_app_type{ _crt_unknown_app, _crt_console_app, _crt_gui_app} _crt_app_type;void __cdecl _set_app_type( _crt_app_type appType  );
__setusermatherr-void __setusermatherr( _HANDLE_MATH_ERROR pf  );
_set_fmode-errno_t _set_fmode( int mode );
_configthreadlocale-int _configthreadlocale( int per_thread_locale_type  );
free-void free( void* memblock );

lstrcmpA-int lstrcmpA( LPCSTR lpString1, LPCSTR lpString2 );
InitializeCriticalSectionEx-BOOL InitializeCriticalSectionEx( LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount, DWORD Flags );
DeleteCriticalSection-void DeleteCriticalSection( LPCRITICAL_SECTION lpCriticalSection );
LCMapStringEx-int LCMapStringEx( LPCWSTR lpLocaleName, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM sortHandle );
GetStringTypeW-BOOL GetStringTypeW( DWORD dwInfoType, _In_NLS_string_(cchSrc );
GetCPInfo-BOOL GetCPInfo( UINT CodePage, LPCPINFO lpCPInfo );
UnhandledExceptionFilter-LONG UnhandledExceptionFilter( _EXCEPTION_POINTERS* *ExceptionInfo );
SetUnhandledExceptionFilter-LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter( LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter );
GetCurrentProcess-HANDLE GetCurrentProcess( );
TerminateProcess-BOOL TerminateProcess( HANDLE hProcess, UINT uExitCode );
QueryPerformanceCounter-BOOL QueryPerformanceCounter( LARGE_INTEGER* *lpPerformanceCount );
GetCurrentProcessId-DWORD GetCurrentProcessId( );
GetSystemTimeAsFileTime-void GetSystemTimeAsFileTime( LPFILETIME lpSystemTimeAsFileTime );
InitializeSListHead-void InitializeSListHead( PSLIST_HEADER ListHead );
IsDebuggerPresent-BOOL IsDebuggerPresent( );
GetStartupInfoW-void GetStartupInfoW( LPSTARTUPINFOW lpStartupInfo );
InitializeCriticalSectionAndSpinCount-BOOL InitializeCriticalSectionAndSpinCount( LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount );
TlsAlloc-DWORD TlsAlloc( );
TlsGetValue-LPVOID TlsGetValue( DWORD dwTlsIndex );
TlsFree-BOOL TlsFree( DWORD dwTlsIndex );
FreeLibrary-BOOL FreeLibrary( HMODULE hLibModule );
LoadLibraryExW-HMODULE LoadLibraryExW( LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags );
GetModuleFileNameW-DWORD GetModuleFileNameW( HMODULE hModule, LPWSTR lpFilename, DWORD nSize );
GetModuleHandleExW-BOOL GetModuleHandleExW( DWORD dwFlags, LPCWSTR lpModuleName, HMODULE* *phModule );
GetCommandLineA-LPSTR GetCommandLineA( );
GetCommandLineW-LPWSTR GetCommandLineW( );
GetExitCodeProcess-BOOL GetExitCodeProcess( HANDLE hProcess, LPDWORD lpExitCode );
CreateProcessW-BOOL CreateProcessW( LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation );
GetFileAttributesExW-BOOL GetFileAttributesExW( LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation );
CompareStringW-int CompareStringW( LCID Locale, DWORD dwCmpFlags, _In_NLS_string_(cchCount1 );
LCMapStringW-int LCMapStringW( LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest );
GetLocaleInfoW-int GetLocaleInfoW( LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData );
IsValidLocale-BOOL IsValidLocale( LCID Locale, DWORD dwFlags );
EnumSystemLocalesW-BOOL EnumSystemLocalesA( LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags );
FlushFileBuffers-BOOL FlushFileBuffers( HANDLE hFile );
GetConsoleOutputCP-UINT WINAPI GetConsoleOutputCP(void );
GetFileSizeEx-BOOL GetFileSizeEx( HANDLE hFile, PLARGE_INTEGER lpFileSize );
HeapReAlloc-DECLSPEC_ALLOCATOR LPVOID HeapReAlloc( HANDLE hHeap, DWORD dwFlags, _Frees_ptr_opt_ LPVOID lpMem, SIZE_T dwBytes );
FindClose-BOOL FindClose( HANDLE hFindFile );
FindFirstFileExW-HANDLE FindFirstFileExW( LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags );
FindNextFileW-BOOL FindNextFileW( HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData );
IsValidCodePage-BOOL IsValidCodePage( UINT CodePage );
GetACP-UINT GetACP( );
GetOEMCP-UINT GetOEMCP( );
GetEnvironmentStringsW-LPWCH GetEnvironmentStringsW( );
FreeEnvironmentStringsW-BOOL FreeEnvironmentStringsA( LPCH penv );
SetEnvironmentVariableW-BOOL SetEnvironmentVariableW( LPCWSTR lpName, LPCWSTR lpValue );
GetProcessHeap-HANDLE GetProcessHeap( );
HeapSize-SIZE_T HeapSize( HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem );
SetEndOfFile-BOOL SetEndOfFile( HANDLE hFile );
RtlCaptureContext-NTSYSAPI VOID RtlCaptureContext( PCONTEXT ContextRecord );
ReleaseMutex-BOOL ReleaseMutex( HANDLE hMutex );
GetCurrentDirectoryW-DWORD GetCurrentDirectory( DWORD nBufferLength, LPTSTR lpBuffer );
GetEnvironmentVariableW-DWORD GetEnvironmentVariableW( LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize );
AddVectoredExceptionHandler-PVOID AddVectoredExceptionHandler( ULONG First, PVECTORED_EXCEPTION_HANDLER Handler );
SetThreadStackGuarantee-BOOL SetThreadStackGuarantee( PULONG StackSizeInBytes );
WaitForSingleObjectEx-DWORD WaitForSingleObjectEx( HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable );
LoadLibraryA-HMODULE LoadLibraryA( LPCSTR lpLibFileName );
CreateMutexA-HANDLE CreateMutexA( LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName );
GetFileInformationByHandle-BOOL GetFileInformationByHandle( HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation );
DeviceIoControl-BOOL DeviceIoControl( HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped );
FormatMessageW-DWORD FormatMessageW( DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list* *Arguments );
GetModuleHandleA-HMODULE GetModuleHandleA( LPCSTR lpModuleName );
_register_thread_local_exe_atexit_callback-int atexit( void (__cdecl* *func  );
_initterm_e-void __cdecl _initterm( PVFV* *, PVFV* * );
_initterm-void __cdecl _initterm( PVFV* *, PVFV* * );
_crt_atexit-int atexit( void (__cdecl* *func  );
_controlfp_s-errno_t _controlfp_s( unsigned int* *currentControl, unsigned int newControl, unsigned int mask );
_set_app_type-typedef enum _crt_app_type{ _crt_unknown_app, _crt_console_app, _crt_gui_app} _crt_app_type;void __cdecl _set_app_type( _crt_app_type appType  );
__setusermatherr-void __setusermatherr( _HANDLE_MATH_ERROR pf  );
_set_fmode-errno_t _set_fmode( int mode );
_configthreadlocale-int _configthreadlocale( int per_thread_locale_type  );
free-void free( void* *memblock );
WriteConsoleW-BOOL WINAPI WriteConsole( HANDLE hConsoleOutput, VOID* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved );
GetStdHandle-HANDLE WINAPI GetStdHandle( DWORD nStdHandle );
GetConsoleMode-BOOL WINAPI GetConsoleMode( HANDLE hConsoleHandle, LPDWORD lpMode );
ReadConsoleW-BOOL WINAPI ReadConsole( HANDLE hConsoleInput, LPVOID lpBuffer, DWORD  nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, LPVOID pInputControl );
_register_onexit_function-Traceback (most recent call last );
_register_onexit_function-NTENT_CHUNK_SIZE );
_initialize_onexit_table-Traceback (most recent call last );
_initialize_onexit_table-\AppData\Local\Programs\Python\Python39\lib\site-packages\requests\adapters.py", line 440, in send resp = conn.urlopen( File "C:\Users\Rudic\AppData\Local\Programs\Python\Python39\lib\site-packages\urllib3\connectionpool.py", line 703, in urlopen httplib_response = self._make_request( File "C:\Users\Rudic\AppData\Local\Programs\Python\Python39\lib\site-packages\urllib3\connectionpool.py", line 386, in _make_request self._validate_conn(conn );
_exit-Traceback (most recent call last );
_exit-as _shutil File "C:\Users\Rudic\AppData\Local\Programs\Python\Python39\lib\shutil.py", line 22, in <module> import bz2 File "<frozen importlib._bootstrap>", line 1007, in _find_and_load File "<frozen importlib._bootstrap>", line 986, in _find_and_load_unlocked File "<frozen importlib._bootstrap>", line 680, in _load_unlocked File "<frozen importlib._bootstrap_external>", line 786, in exec_module File "<frozen importlib._bootstrap_external>", line 881, in get_code File "<frozen importlib._bootstrap_external>", line 979, in get_dataKeyboardInterruptt

htons-u_short htons( u_short hostshort );
recv-int recv( SOCKET s, char* buf, int len, int flags );
send-int send( SOCKET s, char* buf, int len, int flags );
socket-SOCKET socket( int af, int type, int protocol );
gethostbyname-void gethostbyname( a );
WSAStertup-int WSAStartup( WORD wVersionRequired, LPWSADATA lpWSAData );
WSACleanup-int WSACleanup( );
closesocket-int closesocket( SOCKET s );
connect-int connect( SOCKET s, sockaddr* name, int namelen );
_set_app_type-void _set_app_type( _crt_app_type appType  );
__setusermatherr-void __setusermatherr( _HANDLE_MATH_ERROR pf  );
_initterm-void _initterm( PVFV* , PVFV*  );
_initterm_e-void _initterm( PVFV* , PVFV*  );
_set_fmode-errno_t _set_fmode( int mode );
__p___argc-extern int __argc;extern char* * __argv;extern wchar_t* * __wargv; 
__p___argv-extern int __argc;extern char* * __argv;extern wchar_t* * __wargv; 
_cexit-void _cexit( void  );
_c_exit-void _cexit( void  );
ungetc-int ungetc( int c, FILE* stream );
_configthreadlocale-int _configthreadlocale( int per_thread_locale_type  );
__p__commode-int*  __p__commode(  );
_seh_filter_dll-int __cdecl _seh_filter_dll( unsigned long _ExceptionNum, struct _EXCEPTION_POINTERS* _ExceptionPtr );
malloc-void* malloc( size_t size );
_crt_atexit-int atexit( void (__cdecl* func  );
strcpy_s-errno_t strcpy_s( char* dest, rsize_t dest_size, const char* src );
strcat_s-errno_t strcat_s( char* strDestination, size_t numberOfElements, const char* strSource );
strcat_s-lyo
_controlfp_s-errno_t _controlfp_s( unsigned int* currentControl, unsigned int newControl, unsigned int mask );
terminate-void terminate( void  );
_wmakepath_s-errno_t _makepath_s( char* path, size_t sizeInBytes, const char* drive, const char* dir, const char* fname, const char* ext );
_wsplitpath_s-errno_t _splitpath_s( const char*  path, char*  drive, size_t driveNumberOfElements, char*  dir, size_t dirNumberOfElements, char*  fname, size_t nameNumberOfElements, char*  ext, size_t extNumberOfElements );
_wsplitpath_s-nly_
wcscpy_s-errno_t strcpy_s( char* dest, rsize_t dest_size, const char* src );
_callnewh-int _callnewh( size_t size  );
setvbuf-int setvbuf( FILE* stream, char* buffer, int mode, size_t size );
fwrite-size_t fwrite( void* buffer, size_t size, size_t count, FILE* stream );
_fseeki64-int fseek( FILE* stream, long offset, int origin );
fsetpos-int fsetpos( FILE* stream, const fpos_t* pos );
fread-size_t fread( void* buffer, size_t size, size_t count, FILE* stream );
fputc-int fputc( int c, FILE* stream );
fgetpos-int fgetpos( FILE* stream, fpos_t* pos );
fgetc-int fgetc( FILE* stream );
fflush-int fflush( FILE* stream );
fclose-int fclose( FILE* stream );
_invalid_parameter-extern "C" void __cdecl_invalid_parameter( wchar_t const* const expression, wchar_t const* const function_name, wchar_t const* const file_name, unsigned int const line_number, uintptr_t const reserved );
_CrtDbgReportW-int _CrtDbgReport( int reportType, const char* filename, int linenumber, const char* moduleName, const char* format ... );
_malloc_dbg-void* _malloc_dbg( size_t size, int blockType, const char* filename, int linenumber );
_CrtDbgReport-int _CrtDbgReport( int reportType, const char* filename, int linenumber, const char* moduleName, const char* format ... );
system-int system( const char* command );
strncpy_s-errno_t strncpy_s( char* strDest, size_t numberOfElements, const char* strSource, size_t count );
strncpy_s- const char* strSource, size_t count, _locale_t locale );
_unlock_file-BOOL UnlockFile( HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh );
_lock_file-BOOL LockFile( HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh );
_register_thread_local_exe_atexit_callback-int atexit( void (__cdecl* func  );
UnhandledExceptionFilter-LONG UnhandledExceptionFilter( _EXCEPTION_POINTERS* ExceptionInfo );
SetUnhandledExceptionFilter-LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter( LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter );
GetCurrentProcess-HANDLE GetCurrentProcess( );
TerminateProcess-BOOL TerminateProcess( HANDLE hProcess, UINT uExitCode );
IsProcessorFeaturePresent-BOOL IsProcessorFeaturePresent( DWORD ProcessorFeature );
IsDebuggerPresent-BOOL IsDebuggerPresent( );
RaiseException-void RaiseException( DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR* lpArguments );
QueryPerformanceCounter-BOOL QueryPerformanceCounter( LARGE_INTEGER* lpPerformanceCount );
GetCurrentProcessId-DWORD GetCurrentProcessId( );
GetSystemTimeAsFileTime-void GetSystemTimeAsFileTime( LPFILETIME lpSystemTimeAsFileTime );
InitializeSListHead-void InitializeSListHead( PSLIST_HEADER ListHead );
GetStartupInfoW-void GetStartupInfoW( LPSTARTUPINFOW lpStartupInfo );
GetProcessHeap-HANDLE GetProcessHeap( );
VirtualQuery-SIZE_T VirtualQuery( LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength );
FreeLibrary-BOOL FreeLibrary( HMODULE hLibModule );
RtlCaptureContext-NTSYSAPI VOID RtlCaptureContext( PCONTEXT ContextRecord );
ReleaseMutex-BOOL ReleaseMutex( HANDLE hMutex );
GetCurrentDirectoryW-DWORD GetCurrentDirectory( DWORD nBufferLength, LPTSTR lpBuffer );
GetStdHandle-HANDLE WINAPI GetStdHandle( _In_ DWORD nStdHandle );
AddVectoredExceptionHandler-PVOID AddVectoredExceptionHandler( ULONG First, PVECTORED_EXCEPTION_HANDLER Handler );
SetThreadStackGuarantee-BOOL SetThreadStackGuarantee( PULONG StackSizeInBytes );
InitializeCriticalSection-void InitializeCriticalSection( LPCRITICAL_SECTION lpCriticalSection );
WaitForSingleObjectEx-DWORD WaitForSingleObjectEx( HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable );
LoadLibraryA-HMODULE LoadLibraryA( LPCSTR lpLibFileName );
CreateMutexA-HANDLE CreateMutexA( LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName );
GetFileInformationByHandle-BOOL GetFileInformationByHandle( HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation );
DeviceIoControl-BOOL DeviceIoControl( HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped );
FormatMessageW-DWORD FormatMessageW( DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list* Arguments );
GetFullPathNameW-DWORD GetFullPathNameW( LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR* lpFilePart );
TlsGetValue-LPVOID TlsGetValue( DWORD dwTlsIndex );
TlsSetValue-BOOL TlsSetValue( DWORD dwTlsIndex, LPVOID lpTlsValue );
GetModuleHandleA-HMODULE GetModuleHandleA( LPCSTR lpModuleName );
GetConsoleMode-BOOL WINAPI GetConsoleMode( _In_  HANDLE  hConsoleHandle, _Out_ LPDWORD lpMode );
WriteConsoleW-BOOL WriteConsole( HANDLE hConsoleOutput, VOID* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved );
ReadConsoleW-BOOL ReadConsole( HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, LPVOID pInputControl );
HeapReAlloc-DECLSPEC_ALLOCATOR LPVOID HeapReAlloc( HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes );
free-void free( void* memblock );
lstrcmpA-int lstrcmpA( LPCSTR lpString1, LPCSTR lpString2 );
InitializeCriticalSectionEx-BOOL InitializeCriticalSectionEx( LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount, DWORD Flags );
DeleteCriticalSection-void DeleteCriticalSection( LPCRITICAL_SECTION lpCriticalSection );
EncodePointer-PVOID EncodePointer( _In_ PVOID Ptr );
LCMapStringEx-int LCMapStringEx( LPCWSTR lpLocaleName, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM sortHandle );
GetStringTypeW-BOOL GetStringTypeW( DWORD dwInfoType, _In_NLS_string_(cchSrc );
GetCPInfo-BOOL GetCPInfo( UINT CodePage, LPCPINFO lpCPInfo );
RtlUnwind-NTSYSAPI VOID RtlUnwind( PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue );
InitializeCriticalSectionAndSpinCount-BOOL InitializeCriticalSectionAndSpinCount( LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount );
TlsAlloc-DWORD TlsAlloc( );
TlsFree-BOOL TlsFree( DWORD dwTlsIndex );
LoadLibraryExW-HMODULE LoadLibraryExW( LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags );
GetModuleHandleExW-BOOL GetModuleHandleExW( DWORD dwFlags, LPCWSTR lpModuleName, HMODULE* phModule );
GetCommandLineA-LPSTR GetCommandLineA( );
GetCommandLineW-LPWSTR GetCommandLineW( );
GetExitCodeProcess-BOOL GetExitCodeProcess( HANDLE hProcess, LPDWORD lpExitCode );
GetFileAttributesExW-BOOL GetFileAttributesExW( LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation );
CompareStringW-int CompareStringW( LCID Locale, DWORD dwCmpFlags, _In_NLS_string_(cchCount1 );
LCMapStringW-int LCMapStringW( LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest );
GetLocaleInfoW-int GetLocaleInfoW( LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData );
IsValidLocale-BOOL IsValidLocale( LCID Locale, DWORD dwFlags );
GetUserDefaultLCID-LCID GetUserDefaultLCID( );
EnumSystemLocalesW-BOOL EnumSystemLocalesA( LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags );
FlushFileBuffers-BOOL FlushFileBuffers( HANDLE hFile );
GetConsoleOutputCP-UINT WINAPI GetConsoleOutputCP(void );
GetFileSizeEx-BOOL GetFileSizeEx( HANDLE hFile, PLARGE_INTEGER lpFileSize );
FindClose-BOOL FindClose( HANDLE hFindFile );
FindFirstFileExW-HANDLE FindFirstFileExW( LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags );
FindNextFileW-BOOL FindNextFileW( HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData );
IsValidCodePage-BOOL IsValidCodePage( UINT CodePage );
GetACP-UINT GetACP( );
GetOEMCP-UINT GetOEMCP( );
GetEnvironmentStringsW-LPWCH GetEnvironmentStringsW( );
FreeEnvironmentStringsW-BOOL FreeEnvironmentStringsA( LPCH penv );
SetEnvironmentVariableW-BOOL SetEnvironmentVariableW( LPCWSTR lpName, LPCWSTR lpValue );
SetStdHandle-BOOL WINAPI SetStdHandle( _In_ DWORD  nStdHandle, _In_ HANDLE hHandle );
HeapSize-SIZE_T HeapSize( HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem );
SetEndOfFile-BOOL SetEndOfFile( HANDLE hFile );
SetConsoleTextAttribute-BOOL WINAPI SetConsoleTextAttribute( _In_ HANDLE hConsoleOutput, _In_ WORD   wAttributes );
SwitchToThread-BOOL SwitchToThread( );
GetConsoleCP-UINT WINAPI GetConsoleCP(void );

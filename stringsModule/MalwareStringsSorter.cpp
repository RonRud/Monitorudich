// MalwareStringsSorter.cpp : This file contains the 'main' function. Program execution begins and ends there.
//


#include <iostream>
#include <fstream>
#include <string>
#include <set>
#include <math.h>

// Generate probalityMatrix and threshold and save them in probabilty_matrix_data.txt
/* 
int main()
{
	int probalityMatrix[95][95]; //every data point is the ASCII value -32 
	for (int i = 0; i < 95; i++)
	{
		for (int j = 0; j < 95; j++) {
			probalityMatrix[i][j] = 5;
		}
	}
	
	std::string line;
	std::fstream myFile("good.txt");
	if (myFile.is_open()) {
		while (getline(myFile, line)) {
			for (int i = 0; i < line.length()-1; i++)
			{
				probalityMatrix[int(line[i]) - 32][int(line[i+1]) - 32]++;
			}
		}
		myFile.close();
	}
	else {
		std::cout << "Unable to open file" << std::endl;
	}

	for (int i = 0; i < 95; i++)
	{
		float sum = 0;
		for (int j = 0; j < 95; j++) {
			sum += probalityMatrix[i][j];
		}
		std::cout << sum << std::endl;
		for (int k = 0; k < 95; k++)
		{
			probalityMatrix[i][k] = probalityMatrix[i][k]; //might need normaliztion here later
			//std::cout << probalityMatrix[i][k] << ",";
		}
		//std::cout << std::endl;
	}

	myFile.open("good.txt");
	int goodMin = 99999999999;
	if (myFile.is_open()) {
		while (getline(myFile, line)) {
			int lineValue = 0;
			for (int i = 0; i < line.length() - 1; i++)
			{
				lineValue += probalityMatrix[int(line[i]) - 32][int(line[i + 1]) - 32];
			}
			if (lineValue < goodMin) { goodMin = lineValue; }
		}
		myFile.close();
	}

	myFile.open("bad.txt");
	int badMax = 0;
	if (myFile.is_open()) {
		while (getline(myFile, line)) {
			int lineValue = 0;
			for (int i = 0; i < line.length() - 1; i++)
			{
				lineValue += probalityMatrix[int(line[i]) - 32][int(line[i + 1]) - 32];
			}
			if (lineValue > badMax) { badMax = lineValue; }
		}
		myFile.close();
	}
	int threshold = goodMin - ((goodMin - badMax) / 2);
	std::cout << "good min: " << goodMin << std::endl;
	std::cout << "bad max: " << badMax << std::endl;
	std::cout << "threshold: " << threshold << std::endl;
	
	std::fstream writeFile;
	writeFile.open("probabilty_matrix_data.txt", std::ios::out);
	writeFile << threshold << "\n";
	for (int i = 0; i < 95; i++)
	{
		for (int j = 0; j < 95; j++)
		{
			writeFile << probalityMatrix[i][j] << "\n";
		}
	}
	myFile.close();
}*/

/*
int main()
{
	std::set<char> possible_chars;
	std::string line;
	std::fstream myFile("examples.txt");
	if (myFile.is_open()) {
		while (getline(myFile, line)) {
			for (char& ch : line) {
				possible_chars.insert(ch);
			}
		}
		myFile.close();
		for (auto const& i : possible_chars) {
			std::cout << i << "";
		}
		std::cout << std::endl;
		std::cout << "possible_chars length: " << possible_chars.size() << std::endl;
	}
	else {
		std::cout << "Unable to open file" << std::endl;
	}
}*/

/* manual sort to good.txt and bad.txt
int main()
{
	std::string line;
	std::fstream myFile("examples.txt");
	std::fstream writeGoodFile;
	std::fstream writeBadFile;
	int counter = 0;
	int is_good;
	writeGoodFile.open("good.txt", std::ios::out | std::ios::app);
	writeBadFile.open("bad.txt", std::ios::out | std::ios::app);
	if (myFile.is_open()) {
		while (getline(myFile, line)) {

			std::cout << counter << ". " << line << std::endl;
			
			if (counter > 2200) { //can adjust to go throught later parts of the strings
				std::cin >> is_good;
				if (is_good == 1) {
					writeGoodFile << line << "\n";
				}
				else if (is_good == 9) {
					myFile.close();
				}
				else {
					writeBadFile << line << "\n";
				}
			}
			counter++;
		}
		myFile.close();
	}
	else {
		std::cout << "Unable to open file" << std::endl;
	}
}*/


/* preprocessor for recursive strings run
int main()
{
	std::string line;
	std::fstream myFile ("out.txt");
	std::fstream writeFile;
	writeFile.open("examples.txt", std::ios::out);
	if (myFile.is_open()) {
		while (getline(myFile, line)) {
			int pos = line.find(":", 5);
			line = line.substr(pos + 2);

			//std::cout << line << std::endl;

			writeFile << line << "\n";
		}
		myFile.close();
	}
	else {
		std::cout << "Unable to open file" << std::endl;
	}
}*/

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file